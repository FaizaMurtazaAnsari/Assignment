import {useEffect, useState } from 'react';
import Head from 'next/head';
//import Image from 'next/image';
import { Inter } from '@next/font/google';
import styles from '@/styles/Home.module.css';
//import { ChakraProvider } from '@chakra-ui/react'
import {Heading ,Box, Flex,Button ,Input, background, color,Stack} from '@chakra-ui/react'

 const inter = Inter({ subsets: ['latin'] })

interface Todo {
  task: string;
  completed: boolean;
}

const dummyData: Todo[] = [
  { task: "Quater2 ", completed: false },
  { task: "typescript todoApp", completed: false },
  { task: "without chakra ui", completed: false },
  { task: "going to vercel install", completed: false },
  { task: "deploye in vercel", completed: false },
  { task: "Web and Android developer", completed: false },
  { task: "React native Developer", completed: false },
  { task: "react web developer", completed: false },
  { task: "react Mobile Developer", completed: false },
  { task: "due to time management", completed: false }
];

const TodoList: React.FC = () => {
  const [todos, setTodos] = useState(dummyData);
  const [newTodo, setNewTodo] = useState('');

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setTodos([...todos, {task:newTodo, completed:false}]);
    setNewTodo('');
  }

  const handleDelete = (index: number) => {
    const newTodos = [...todos];
    newTodos.splice(index, 1);
    setTodos(newTodos);
  }

  return (
<>
       <Head>
         <title>totoApp</title>
        <meta name="description" content="Generated by create next app" />
         <meta name="viewport" content="width=device-width, initial-scale=1" />
         <link rel="icon" href="/favicon.ico" />
      </Head>
      
     <main className={styles.main}>
        <div className="flex place-content-center w-2/12 border-4 h-full">
        <h1 className={styles.title}>
        &nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Todo App
        </h1>
        <p className={styles.description}>
         <p className="w-screen flex flex-wrap flex-row place-items-center">
         <p className={styles.description}>
            &nbsp;
            <form onSubmit={handleSubmit}>
              <Input size='xs' placeholder='add list' 
          type="text"
          value={newTodo}
          onChange={e => setNewTodo(e.target.value)} />

       &nbsp;&nbsp;&nbsp;&nbsp; <Button colorScheme='telegram' size='xs' type="submit"> Add Todo</Button>
        {/* <button type="submit">Add Todo</button> */}
      </form>
</p>
      <p className={styles.description}>
      <ul>
        
        <h3>ListData</h3>
        &nbsp;&nbsp;&nbsp;&nbsp;
        <Stack spacing={4} direction='column' align='center'>
        {todos.map((todo, index) => (
          <li key={index} style={{ textDecoration: todo.completed ? "line-through" : "none" }}>
            
            {todo.task+"      "+"      "}
            <div className="flex w-2/12 border-4 h-full">
           <Button colorScheme='red' size='xs' onClick={() => handleDelete(index)}>   Delete  </Button></div>
          
<span>_____________________________________</span>
          </li>
        ))}
        </Stack>
      
      </ul>
      </p>
      </p>
           </p>
           </div>
       </main>
       
     </>

  );
}

export default TodoList;